diff --git a/src/Controller/PreviewController.php b/src/Controller/PreviewController.php
index 2f8f2ce..22c6d0a 100644
--- a/src/Controller/PreviewController.php
+++ b/src/Controller/PreviewController.php
@@ -3,6 +3,10 @@
 namespace Drupal\view_modes_display\Controller;
 
 use Drupal\Core\Controller\ControllerBase;
+use Drupal\Core\Entity\ContentEntityInterface;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Routing\RouteMatchInterface;
 use Drupal\media\MediaInterface;
 use Drupal\node\NodeInterface;
 use Drupal\block_content\BlockContentInterface;
@@ -20,34 +24,44 @@ class PreviewController extends ControllerBase {
   /**
    * ConfigFactory.
    *
-   * @var Drupal\view_modes_display\Service\PreviewFactory
+   * @var \Drupal\view_modes_display\Service\PreviewFactory
    */
   protected $previewFactory;
 
+  /**
+   * EntityDisplayRepository.
+   *
+   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   */
+  protected $entityDisplayRepository;
+
   /**
    * DefaultController constructor.
    *
-   * @param Drupal\view_modes_display\Service\PreviewFactory $previewFactory
+   * @param \Drupal\view_modes_display\Service\PreviewFactory $previewFactory
    *   Preview Factory.
    */
   public function __construct(
-    PreviewFactory $previewFactory
+    PreviewFactory $previewFactory,
+    EntityDisplayRepositoryInterface $entityDisplayRepository
   ) {
     $this->previewFactory = $previewFactory;
+    $this->entityDisplayRepository = $entityDisplayRepository;
   }
 
   /**
    * {@inheritdoc}
    *
-   * @param Symfony\Component\DependencyInjection\ContainerInterface $container
+   * @param \Symfony\Component\DependencyInjection\ContainerInterface $container
    *   Container.
    *
-   * @return Drupal\Core\Controller\ControllerBase
+   * @return \Drupal\Core\Controller\ControllerBase
    *   ControllerBase with injected services.
    */
   public static function create(ContainerInterface $container) {
     return new static(
-      $container->get('view_modes_display.preview_factory')
+      $container->get('view_modes_display.preview_factory'),
+      $container->get('entity_display.repository')
     );
   }
 
@@ -103,4 +117,74 @@ class PreviewController extends ControllerBase {
     return $this->previewFactory->preview($media);
   }
 
+  /**
+   * Returns preview for entity - dedicated view mode or all of them.
+   *
+   * @param \Drupal\Core\Entity\EntityInterface $entity
+   *   Entity.
+   *
+   * @return array
+   *   Preview render array.
+   */
+  public function previewEntity(RouteMatchInterface $route_match, $entity_type) {
+    /** @var EntityInterface $entity */
+    $entity = $route_match->getParameter($entity_type);
+    $view_mode = $route_match->getParameter('view_mode');
+    $view_modes = $this->entityDisplayRepository->getViewModes($entity->getEntityTypeId());
+    $renderArray = [];
+    // Special view mode placeholder to fetch all. Default in the route
+    // definition.
+    if ($view_mode == 'wmd-all') {
+      $renderArray = $this->previewFactory->preview($entity);
+    }
+    else {
+      $markup = $this->previewFactory->buildMarkup($entity, $view_mode);
+      $renderArray[] = [
+        '#prefix' => '<div class="view-mode-list-item view-mode-list-item-' . $view_mode . '"><div class="view-mode-list-item-label">' . $view_modes[$view_mode]['label'] . '</div><div class="view-mode-list-item-content">',
+        '#markup' => render($markup),
+        '#suffix' => '</div></div>',
+      ];
+    }
+    return $renderArray;
+  }
+
+  /**
+   * Provides a link list with all available - dedicated - view mode previews.
+   *
+   * @param \Drupal\Core\Routing\RouteMatchInterface $route_match
+   * @param string $entity_type
+   *
+   * @return array
+   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
+   * @throws \Drupal\Core\Entity\EntityMalformedException
+   */
+  public function previewList(RouteMatchInterface $route_match, $entity_type) {
+    $content = [];
+    $links = [];
+    $view_modes = $this->entityDisplayRepository->getViewModes($entity_type);
+    /** @var EntityInterface $entity */
+    $entity = $route_match->getParameter($entity_type);
+    $entityDisplays = $this->previewFactory->getEntityDisplays($entity_type, $entity->bundle());
+    foreach ($this->previewFactory->getEnabledDisplayModes($entityDisplays) as $display) {
+      $label = ucfirst($display);
+      if ((isset($view_modes[$display]['label']))) {
+        $label = $view_modes[$display]['label'];
+      }
+      $url = $entity->toUrl('wmd-preview-render');
+      $url = $url->setRouteParameter('view_mode', $display);
+      $links[] = [
+        '#type' => 'link',
+        '#url' => $url,
+        '#title' => t('Preview %label', ['%label' => $label]),
+      ];
+    }
+    $content['preview_links'] = [
+      '#theme' => 'item_list',
+      '#items' => $links,
+      '#title' => t('Available ViewMode Previews:'),
+    ];
+    return $content;
+  }
+
 }
diff --git a/src/EntityTypeInfo.php b/src/EntityTypeInfo.php
new file mode 100644
index 0000000..7d14fe5
--- /dev/null
+++ b/src/EntityTypeInfo.php
@@ -0,0 +1,101 @@
+<?php
+
+namespace Drupal\view_modes_display;
+
+use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Session\AccountInterface;
+use Drupal\Core\StringTranslation\StringTranslationTrait;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Manipulates entity type information.
+ *
+ * This class contains primarily bridged hooks for compile-time or
+ * cache-clear-time hooks. Runtime hooks should be placed in EntityOperations.
+ */
+class EntityTypeInfo implements ContainerInjectionInterface {
+
+  use StringTranslationTrait;
+
+  /**
+   * The current user.
+   *
+   * @var \Drupal\Core\Session\AccountInterface
+   */
+  protected $currentUser;
+
+  /**
+   * EntityDisplayRepository.
+   *
+   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   */
+  protected $entityDisplayRepository;
+
+  /**
+   * EntityTypeInfo constructor.
+   *
+   * @param \Drupal\Core\Session\AccountInterface $current_user
+   *   Current user.
+   */
+  public function __construct(AccountInterface $current_user, EntityDisplayRepositoryInterface $entityDisplayRepository) {
+    $this->currentUser = $current_user;
+    $this->entityDisplayRepository = $entityDisplayRepository;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container) {
+    return new static(
+      $container->get('current_user'),
+      $container->get('entity_display.repository')
+    );
+  }
+
+  /**
+   * Adds preview links to appropriate entity types.
+   *
+   * This is an alter hook bridge.
+   *
+   * @param \Drupal\Core\Entity\EntityTypeInterface[] $entity_types
+   *   The master entity type list to alter.
+   *
+   * @see hook_entity_type_alter()
+   */
+  public function entityTypeAlter(array &$entity_types) {
+    foreach ($entity_types as $entity_type_id => $entity_type) {
+      if ($viewModes = $this->entityDisplayRepository->getViewModes($entity_type_id)) {
+        $entity_type->setLinkTemplate('wmd-preview-list', "/view-mode-display/$entity_type_id/{{$entity_type_id}}/list");
+        $entity_type->setLinkTemplate('wmd-preview-render', "/view-mode-display/$entity_type_id/{{$entity_type_id}}/preview/{view_mode}");
+      }
+    }
+  }
+
+  /**
+   * Adds preview operations on entity that supports it.
+   *
+   * @param \Drupal\Core\Entity\EntityInterface $entity
+   *   The entity on which to define an operation.
+   *
+   * @return array
+   *   An array of operation definitions.
+   *
+   * @see hook_entity_operation()
+   */
+  public function entityOperation(EntityInterface $entity) {
+    $operations = [];
+    if ($this->currentUser->hasPermission('preview view modes')) {
+      if ($entity->hasLinkTemplate('wmd-preview-list')) {
+        $operations['view-mode-display'] = [
+          'title' => $this->t('Preview'),
+          'weight' => 100,
+          'url' => $entity->toUrl('wmd-preview-list'),
+        ];
+      }
+    }
+    return $operations;
+  }
+
+}
diff --git a/src/Plugin/Derivative/ViewModeDisplayLocalTask.php b/src/Plugin/Derivative/ViewModeDisplayLocalTask.php
new file mode 100644
index 0000000..356b7ae
--- /dev/null
+++ b/src/Plugin/Derivative/ViewModeDisplayLocalTask.php
@@ -0,0 +1,79 @@
+<?php
+
+namespace Drupal\view_modes_display\Plugin\Derivative;
+
+use Drupal\Component\Plugin\Derivative\DeriverBase;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Plugin\Discovery\ContainerDeriverInterface;
+use Drupal\Core\StringTranslation\StringTranslationTrait;
+use Drupal\Core\StringTranslation\TranslationInterface;
+use Symfony\Component\DependencyInjection\ContainerInterface;
+
+/**
+ * Provides local task definitions for all entity bundles.
+ *
+ * @see \Drupal\view_modes_display\Controller\PreviewController
+ * @see \Drupal\view_modes_display\Routing\RouteSubscriber
+ */
+class ViewModeDisplayLocalTask extends DeriverBase implements ContainerDeriverInterface {
+
+  use StringTranslationTrait;
+
+  /**
+   * The entity manager.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  protected $entityTypeManager;
+
+  /**
+   * Creates an ViewModeDisplayLocalTask object.
+   *
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   The entity manager.
+   * @param \Drupal\Core\StringTranslation\TranslationInterface $string_translation
+   *   The translation manager.
+   */
+  public function __construct(EntityTypeManagerInterface $entity_type_manager, TranslationInterface $string_translation) {
+    $this->entityTypeManager = $entity_type_manager;
+    $this->stringTranslation = $string_translation;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function create(ContainerInterface $container, $base_plugin_id) {
+    return new static(
+      $container->get('entity_type.manager'),
+      $container->get('string_translation')
+    );
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function getDerivativeDefinitions($base_plugin_definition) {
+    $this->derivatives = [];
+
+    foreach ($this->entityTypeManager->getDefinitions() as $entity_type_id => $entity_type) {
+
+      if ($entity_type->hasLinkTemplate('wmd-preview-list')) {
+
+        $this->derivatives["$entity_type_id.view_mode_display_tab"] = [
+          'route_name' => "entity.$entity_type_id.wmd_preview_list",
+          'title' => $this->t('View Mode Preview'),
+          'base_route' => "entity.$entity_type_id.canonical",
+          'weight' => 150,
+        ];
+
+      }
+    }
+
+    foreach ($this->derivatives as &$entry) {
+      $entry += $base_plugin_definition;
+    }
+
+    return $this->derivatives;
+  }
+
+}
diff --git a/src/Routing/RouteSubscriber.php b/src/Routing/RouteSubscriber.php
new file mode 100644
index 0000000..7d7c776
--- /dev/null
+++ b/src/Routing/RouteSubscriber.php
@@ -0,0 +1,134 @@
+<?php
+
+namespace Drupal\view_modes_display\Routing;
+
+use Drupal\Core\Entity\EntityDisplayRepositoryInterface;
+use Drupal\Core\Entity\EntityTypeInterface;
+use Drupal\Core\Entity\EntityTypeManagerInterface;
+use Drupal\Core\Routing\RouteSubscriberBase;
+use Drupal\Core\Routing\RoutingEvents;
+use Symfony\Component\Routing\Route;
+use Symfony\Component\Routing\RouteCollection;
+
+/**
+ * Subscriber for View Mode Display routes.
+ */
+class RouteSubscriber extends RouteSubscriberBase {
+
+  /**
+   * The entity type manager.
+   *
+   * @var \Drupal\Core\Entity\EntityTypeManagerInterface
+   */
+  protected $entityTypeManager;
+
+  /**
+   * EntityDisplayRepository.
+   *
+   * @var \Drupal\Core\Entity\EntityDisplayRepositoryInterface
+   */
+  protected $entityDisplayRepository;
+
+
+  /**
+   * Constructs a RouteSubscriber object.
+   *
+   * @param \Drupal\Core\Entity\EntityTypeManagerInterface $entity_type_manager
+   *   The entity type manager.
+   */
+  public function __construct(EntityTypeManagerInterface $entity_type_manager, EntityDisplayRepositoryInterface $entityDisplayRepository) {
+    $this->entityTypeManager = $entity_type_manager;
+    $this->entityDisplayRepository = $entityDisplayRepository;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function alterRoutes(RouteCollection $collection) {
+    foreach ($this->entityTypeManager->getDefinitions() as $entity_type_id => $entity_type) {
+      if ($viewModes = $this->entityDisplayRepository->getViewModes($entity_type_id)) {
+        if ($route = $this->getPreviewList($entity_type)) {
+          $collection->add("entity.$entity_type_id.wmd_preview_list", $route);
+        }
+        if ($route = $this->getPreviewRenderRoute($entity_type)) {
+          $collection->add("entity.$entity_type_id.wmd_preview_render" , $route);
+        }
+      }
+    }
+  }
+
+  /**
+   * Gets the entity load route.
+   *
+   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   *   The entity type.
+   *
+   * @return \Symfony\Component\Routing\Route|null
+   *   The generated route, if available.
+   */
+  protected function getPreviewList(EntityTypeInterface $entity_type) {
+    if ($link_template = $entity_type->getLinkTemplate('wmd-preview-list')) {
+      $entity_type_id = $entity_type->id();
+      $route = new Route($link_template);
+      $route
+        ->addDefaults([
+          '_controller' => '\Drupal\view_modes_display\Controller\PreviewController::previewList',
+          '_title' => 'Available View Mode Previews',
+          'entity_type' => $entity_type_id,
+          'view_mode' => 'wmd-all',
+        ])
+        ->addRequirements([
+          '_permission' => 'preview view modes',
+        ])
+        ->setOption('_admin_route', TRUE)
+        ->setOption('parameters', [
+          $entity_type_id => ['type' => 'entity:' . $entity_type_id],
+        ]);
+
+      return $route;
+    }
+  }
+
+  /**
+   * Gets the entity render route.
+   *
+   * @param \Drupal\Core\Entity\EntityTypeInterface $entity_type
+   *   The entity type.
+   *
+   * @return \Symfony\Component\Routing\Route|null
+   *   The generated route, if available.
+   */
+  protected function getPreviewRenderRoute(EntityTypeInterface $entity_type) {
+    if ($link_template = $entity_type->getLinkTemplate('wmd-preview-render')) {
+      $entity_type_id = $entity_type->id();
+      $route = new Route($link_template);
+      $route
+        ->addDefaults([
+          '_controller' => '\Drupal\view_modes_display\Controller\PreviewController::previewEntity',
+          '_title' => 'View Mode Preview',
+          'entity_type' => $entity_type_id,
+        ])
+        ->addRequirements([
+          '_permission' => 'preview view modes',
+
+        ])
+        // Not an admin route - which should allow the frontend theme.
+        //->setOption('_admin_route', TRUE)
+        ->setOption('parameters', [
+          $entity_type_id => ['type' => 'entity:' . $entity_type_id],
+        ]);
+
+      return $route;
+    }
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function getSubscribedEvents() {
+    $events = parent::getSubscribedEvents();
+    $events[RoutingEvents::ALTER] = array('onAlterRoutes', -100);
+    return $events;
+  }
+
+}
diff --git a/src/Service/PreviewFactory.php b/src/Service/PreviewFactory.php
index 906be62..0ce121b 100644
--- a/src/Service/PreviewFactory.php
+++ b/src/Service/PreviewFactory.php
@@ -98,7 +98,7 @@ class PreviewFactory {
    * @return array
    *   Array of enabled display modes.
    */
-  protected function getEnabledDisplayModes(array $displays) {
+  public function getEnabledDisplayModes(array $displays) {
     $enabledDisplayModes = [];
     foreach ($displays as $display) {
       if ($display->status()) {
@@ -127,7 +127,7 @@ class PreviewFactory {
    * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
    * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
    */
-  private function getEntityDisplays($entityTypeId, $entityBundle) {
+  public function getEntityDisplays($entityTypeId, $entityBundle) {
     $configPrefix = 'core.entity_view_display';
     $prefix = $configPrefix . '.' . $entityTypeId . '.' . $entityBundle . '.';
 
@@ -154,7 +154,7 @@ class PreviewFactory {
    *
    * @todo Handle block requirements better.
    */
-  protected function buildMarkup(ContentEntityInterface $entity, $viewMode) {
+  public function buildMarkup(ContentEntityInterface $entity, $viewMode) {
     $entityTypeId = $entity->getEntityType()->get('id');
     $viewBuilder = $this->entityTypeManager->getViewBuilder($entityTypeId);
 
diff --git a/view_modes_display.links.task.yml b/view_modes_display.links.task.yml
index dd30914..aa2dfaa 100644
--- a/view_modes_display.links.task.yml
+++ b/view_modes_display.links.task.yml
@@ -18,3 +18,6 @@ view_modes_display.media:
   route_name: view_modes_display.media
   base_route: entity.media.canonical
   weight: 21
+view_modes_display.entities:
+  class: \Drupal\Core\Menu\LocalTaskDefault
+  deriver: \Drupal\view_modes_display\Plugin\Derivative\ViewModeDisplayLocalTask
diff --git a/view_modes_display.module b/view_modes_display.module
index 437b843..bef87c0 100644
--- a/view_modes_display.module
+++ b/view_modes_display.module
@@ -6,6 +6,7 @@
  */
 
 use Drupal\Core\Routing\RouteMatchInterface;
+use \Drupal\view_modes_display\EntityTypeInfo;
 
 /**
  * Implements hook_help().
@@ -31,3 +32,21 @@ function view_modes_display_theme() {
 
   return $theme;
 }
+
+/**
+ * Implements hook_entity_type_alter().
+ */
+function view_modes_display_entity_type_alter(array &$entity_types) {
+  return \Drupal::service('class_resolver')
+    ->getInstanceFromDefinition(EntityTypeInfo::class)
+    ->entityTypeAlter($entity_types);
+}
+
+/**
+ * Implements hook_entity_operation().
+ */
+function view_modes_display_entity_operation(\Drupal\Core\Entity\EntityInterface $entity) {
+  return \Drupal::service('class_resolver')
+    ->getInstanceFromDefinition(EntityTypeInfo::class)
+    ->entityOperation($entity);
+}
diff --git a/view_modes_display.services.yml b/view_modes_display.services.yml
index 6b90705..157db06 100644
--- a/view_modes_display.services.yml
+++ b/view_modes_display.services.yml
@@ -2,3 +2,8 @@ services:
   view_modes_display.preview_factory:
     class: Drupal\view_modes_display\Service\PreviewFactory
     arguments: ['@config.factory', '@entity_type.manager', '@entity_display.repository']
+  view_modes_display.subscriber:
+    class: Drupal\view_modes_display\Routing\RouteSubscriber
+    arguments: ['@entity_type.manager', '@entity_display.repository']
+    tags:
+      - { name: event_subscriber }
